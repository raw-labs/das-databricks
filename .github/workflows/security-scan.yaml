name: Security Scan
on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Allow manual trigger

env:
  REPORT_DIR: security-reports
  GITHUB_TOKEN: ${{ github.token }}

jobs:
  security-scan:
    name: Security Scan
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get image
        run: |
          # Get latest release from GitHub API
          LATEST_RELEASE_TAG=$(gh api repos/${{ github.repository }}/releases/latest --jq .tag_name)
          # Remove leading 'v' from tag name if present
          IMAGE_TAG=$(echo "$LATEST_RELEASE_TAG" | sed 's/^v//')
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

          # Extract repo name from github.repository (format: owner/repo)
          GIT_REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)

          # Construct image name using repository info
          IMAGE="ghcr.io/${{ github.repository }}/${GIT_REPO_NAME}-server:${IMAGE_TAG}"
          echo "IMAGE=${IMAGE}" >> $GITHUB_ENV

      - name: Get sbt version
        id: get-sbt-version
        run: |
          SBT_VERSION=$(grep 'sbt.version=' project/build.properties | cut -d'=' -f2)
          echo "sbt_version=${SBT_VERSION}" >> $GITHUB_OUTPUT

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'sbt'

      - uses: sbt/setup-sbt@v1
        with:
          sbt-runner-version: ${{ steps.get-sbt-version.outputs.sbt_version }}

      - name: Generate Dependency Tree
        run: |
          mkdir -p ${{ env.REPORT_DIR }}
          sbt dependencyBrowseTreeHTML
          mv target/tree.json ${{ env.REPORT_DIR }}/deptree.json

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE }}
          format: 'json'
          output: '${{ env.REPORT_DIR }}/vulnerabilities.json'
          ignore-unfixed: true
          vuln-type: 'os,library'
          #severity: 'CRITICAL,HIGH'
          github-pat: ${{ github.token }}


      - name: Check for vulnerabilities
        id: check_vulns
        run: |
          # Check if there are any vulnerabilities
          VULN_COUNT=$(jq -r '[.Results[] | select(.Vulnerabilities) | .Vulnerabilities | length] | add // 0' ${{ env.REPORT_DIR }}/vulnerabilities.json)
          if [ "$VULN_COUNT" -eq 0 ]; then
            echo "No vulnerabilities found, stopping workflow"
            echo "FOUND_VULNS=false" >> $GITHUB_ENV
          else
            echo "Found $VULN_COUNT vulnerabilities"
            echo "FOUND_VULNS=true" >> $GITHUB_ENV
          fi

      - name: Check for existing security report
        if: env.FOUND_VULNS == 'true'
        id: check_report
        run: |
          # Check if there's already a security report issue for this version
          EXISTING_ISSUE=$(gh issue list \
            --label "version:${{ env.IMAGE_TAG }}" \
            --label "security" \
            --json number \
            --jq '.[0].number')

          if [ -n "$EXISTING_ISSUE" ]; then
            echo "EXISTING_REPORT=true" >> $GITHUB_ENV
            echo "ISSUE_NUMBER=$EXISTING_ISSUE" >> $GITHUB_ENV
          else
            echo "EXISTING_REPORT=false" >> $GITHUB_ENV
          fi

      - name: Generate Security Report
        if: env.FOUND_VULNS == 'true'
        run: |
          .github/scripts/sec-scan-report \
            ${{ env.REPORT_DIR }}/vulnerabilities.json \
            ${{ env.REPORT_DIR }}/deptree.json \
            ${{ env.REPORT_DIR }}/vulnerabilities.md

          # Output markdown summary to GitHub step summary
          cat ${{ env.REPORT_DIR }}/vulnerabilities.md >> $GITHUB_STEP_SUMMARY

      - name: Ensure labels exist
        if: env.FOUND_VULNS == 'true'
        run: |
          # Function to create label if it doesn't exist
          create_label() {
            local name=$1
            local color=$2
            local description=$3

            # Check if label exists
            if ! gh label list | grep -q "^$name"; then
              echo "Creating label: $name"
              gh label create "$name" --color "$color" --description "$description"
            fi
          }

          # Create base labels
          create_label "security" "d73a4a" "Security-related issues"
          create_label "automated" "0366d6" "Automatically generated content"
          create_label "version:${{ env.IMAGE_TAG }}" "0366d6" "Issues related to version ${{ env.IMAGE_TAG }}"

          # Create severity labels if vulnerabilities exist
          if jq -e '.Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "CRITICAL")' ${{ env.REPORT_DIR }}/vulnerabilities.json > /dev/null; then
            create_label "severity:critical" "b60205" "Critical severity vulnerabilities"
          fi
          if jq -e '.Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "HIGH")' ${{ env.REPORT_DIR }}/vulnerabilities.json > /dev/null; then
            create_label "severity:high" "d93f0b" "High severity vulnerabilities"
          fi
          if jq -e '.Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "MEDIUM")' ${{ env.REPORT_DIR }}/vulnerabilities.json > /dev/null; then
            create_label "severity:medium" "fbca04" "Medium severity vulnerabilities"
          fi
          if jq -e '.Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "LOW")' ${{ env.REPORT_DIR }}/vulnerabilities.json > /dev/null; then
            create_label "severity:low" "0e8a16" "Low severity vulnerabilities"
          fi

      - name: Create or Update Security Report Issue
        if: env.FOUND_VULNS == 'true'
        run: |
          # Get current date
          CURRENT_DATE=$(date '+%Y-%m-%d')

          # Create issue title
          TITLE="Security Scan Report for version ${{ env.IMAGE_TAG }} ($CURRENT_DATE)"

          # Create issue body with full report
          BODY="## Security Scan Report

          **Version:** \`${{ env.IMAGE_TAG }}\`
          **Scan Date:** \`$CURRENT_DATE\`
          **Image:** \`${{ env.IMAGE }}\`

          ### Summary
          $(cat ${{ env.REPORT_DIR }}/vulnerabilities.md)

          ## Action Required
          - [ ] Review all vulnerabilities
          - [ ] Prioritize fixes based on severity
          - [ ] Plan updates for packages with available fixes
          - [ ] Document any accepted risks

          _This report was automatically generated by the security scan workflow._"

          # Create labels based on vulnerabilities
          LABELS="security,automated,version:${{ env.IMAGE_TAG }}"

          # Add severity labels if vulnerabilities exist
          if jq -e '.Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "CRITICAL")' ${{ env.REPORT_DIR }}/vulnerabilities.json > /dev/null; then
            LABELS="$LABELS,severity:critical"
          fi
          if jq -e '.Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "HIGH")' ${{ env.REPORT_DIR }}/vulnerabilities.json > /dev/null; then
            LABELS="$LABELS,severity:high"
          fi
          if jq -e '.Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "MEDIUM")' ${{ env.REPORT_DIR }}/vulnerabilities.json > /dev/null; then
            LABELS="$LABELS,severity:medium"
          fi
          if jq -e '.Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "LOW")' ${{ env.REPORT_DIR }}/vulnerabilities.json > /dev/null; then
            LABELS="$LABELS,severity:low"
          fi

          if [ "$EXISTING_REPORT" = "true" ]; then
            # Update existing issue
            gh issue edit "$ISSUE_NUMBER" \
              --title "$TITLE" \
              --body "$BODY"

            # Get current labels and remove them one by one
            gh issue view "$ISSUE_NUMBER" --json labels --jq '.labels[].name' | while read -r label; do
              gh issue edit "$ISSUE_NUMBER" --remove-label "$label"
            done

            # Add new labels
            gh issue edit "$ISSUE_NUMBER" --add-label "$LABELS"
          else
            # Create new issue
            gh issue create \
              --title "$TITLE" \
              --body "$BODY" \
              --label "$LABELS"
          fi
